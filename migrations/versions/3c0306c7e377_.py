"""empty message

Revision ID: 3c0306c7e377
Revises: 
Create Date: 2021-07-07 14:05:32.749040

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '3c0306c7e377'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_name', sa.VARCHAR(length=60), nullable=True, comment='The name of the group running this project (again, think aboutthis in context of ethics permission).'),
    sa.Column('institution', sa.VARCHAR(length=60), nullable=True, comment='The name of the institution where this group work.'),
    sa.Column('pi', sa.VARCHAR(length=60), nullable=True, comment='The name of the PI of this group'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pcr_assay',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('assay_name', sa.VARCHAR(length=60), nullable=True, comment='What is the name/identifier of the assay? E.g. sars-cov-2 CDC v1'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_sequencing_batch',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), nullable=True),
    sa.Column('date_run', sa.DATE(), nullable=True),
    sa.Column('sequencing_type', sa.VARCHAR(length=64), nullable=True),
    sa.Column('instrument_model', sa.VARCHAR(length=64), nullable=True),
    sa.Column('instrument_name', sa.VARCHAR(length=64), nullable=True, comment='For MLW machines, which exact machine was it run on'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('library_prep_method', sa.VARCHAR(length=64), nullable=True),
    sa.Column('sequencing_centre', sa.VARCHAR(length=64), nullable=True, comment='E.g. Sanger, CGR, MLW, etc.'),
    sa.Column('flowcell_type', sa.VARCHAR(length=64), nullable=True),
    sa.Column('batch_directory', sa.VARCHAR(length=128), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample_source',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_source_identifier', sa.VARCHAR(length=30), nullable=True, comment="the identifier for the sample source this sample came from, e.g. if it's a stool sample, then what is the identifier of the patient it came from"),
    sa.Column('sample_source_type', sa.VARCHAR(length=60), nullable=True, comment='what type of sample source did it come from? i.e. what does the sample source identifier identify? is it a patientor a visit (like tyvac/strataa), or a sampling location for an environmental sample'),
    sa.Column('latitude', sa.Float(), nullable=True, comment='Latitude of sample source if known'),
    sa.Column('longitude', sa.Float(), nullable=True, comment='Longitude of sample source origin if known'),
    sa.Column('country', sa.VARCHAR(length=60), nullable=True, comment='country of origin'),
    sa.Column('location_first_level', sa.VARCHAR(length=40), nullable=True, comment='Highest level of organisation within country e.g. region, province, state'),
    sa.Column('location_second_level', sa.VARCHAR(length=50), nullable=True, comment='Second highest level of organisation e.g. county, district Malawi), large city/metro area'),
    sa.Column('location_third_level', sa.VARCHAR(length=50), nullable=True, comment='Third highest level of organisation e.g. district (UK/VN), township (MW)'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=64), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=128), nullable=False),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('project',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('groups_id', sa.Integer(), nullable=True),
    sa.Column('project_name', sa.VARCHAR(length=64), nullable=True, comment="You can think about this as 'what study got ethics for this sample to be taken'"),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('project_details', sa.VARCHAR(length=160), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['groups_id'], ['groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('read_set_batch',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=60), nullable=True, comment='Name of readset batch.'),
    sa.Column('batch_directory', sa.VARCHAR(length=128), nullable=True, comment='Original directory where readset batch stored.'),
    sa.Column('basecaller', sa.VARCHAR(length=60), nullable=True, comment='Basecaller used to generate sequence data.'),
    sa.Column('raw_sequencing_batch_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['raw_sequencing_batch_id'], ['raw_sequencing_batch.id'], onupdate='cascade', ondelete='set null'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_identifier', sa.VARCHAR(length=30), nullable=True, comment='Lab identifier for the sample which DNA was extracted from. Has to be unique within a group.'),
    sa.Column('sample_type', sa.VARCHAR(length=60), nullable=True, comment='What was DNA extracted from? An isolate, clinical sample (for covid), a plate sweep, whole stools, etc.'),
    sa.Column('species', sa.VARCHAR(length=120), nullable=True, comment='Putative species of this sample, if known/appropriate.'),
    sa.Column('sample_source_id', sa.Integer(), nullable=True),
    sa.Column('day_collected', sa.Integer(), nullable=True, comment='day of the month this was collected'),
    sa.Column('month_collected', sa.Integer(), nullable=True, comment='month this was collected'),
    sa.Column('year_collected', sa.Integer(), nullable=True, comment='year this was collected'),
    sa.Column('day_received', sa.Integer(), nullable=True, comment='day of the month this was received'),
    sa.Column('month_received', sa.Integer(), nullable=True, comment='month this was received'),
    sa.Column('year_received', sa.Integer(), nullable=True, comment='year this was received'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('processing_institution', sa.VARCHAR(length=60), nullable=True, comment='The institution which processed the sample.'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['sample_source_id'], ['sample_source.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('extraction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('extraction_identifier', sa.Integer(), nullable=True, comment='An identifier to differentiate multiple extracts from the ame sample on the same day. It will usually be 1, but if this is the second extract done on this sample on this day, it needs to be 2 (and so on).'),
    sa.Column('extraction_machine', sa.VARCHAR(length=60), nullable=True, comment='E.g. QiaSymphony, manual'),
    sa.Column('extraction_kit', sa.VARCHAR(length=60), nullable=True, comment='E.g. Qiasymphony Minikit'),
    sa.Column('extraction_from', sa.VARCHAR(length=60), nullable=True, comment='E.g. plate sweep, isolate, whole sample'),
    sa.Column('what_was_extracted', sa.VARCHAR(length=60), nullable=True, comment='E.g. DNA, RNA'),
    sa.Column('date_extracted', sa.DateTime(), nullable=True, comment='Date this extract was done'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('processing_institution', sa.VARCHAR(length=60), nullable=True, comment='The institution which did the DNA extraction.'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pcr_result',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_id', sa.Integer(), nullable=True),
    sa.Column('pcr_result', sa.VARCHAR(length=60), nullable=True, comment='Was the test positive or negative'),
    sa.Column('ct', sa.Numeric(), nullable=True, comment='Was the test positive or negative'),
    sa.Column('date_pcred', sa.DateTime(), nullable=True, comment='Date this PCR was done'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.Column('institution', sa.VARCHAR(length=60), nullable=True, comment='Which institution did this PCR?'),
    sa.Column('pcr_identifier', sa.Integer(), nullable=True, comment='Differentiates this PCR from other PCRs done on this sample on the same day.'),
    sa.Column('pcr_assay_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['pcr_assay_id'], ['pcr_assay.id'], ),
    sa.ForeignKeyConstraint(['sample_id'], ['sample.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('sample_source_project',
    sa.Column('sample_source_id', sa.Integer(), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
    sa.ForeignKeyConstraint(['sample_source_id'], ['sample_source.id'], ),
    sa.PrimaryKeyConstraint('sample_source_id', 'project_id')
    )
    op.create_table('covid_confirmatory_pcr',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('extraction_id', sa.Integer(), nullable=True),
    sa.Column('ct', sa.Numeric(), nullable=True, comment='Ct value of the confirmatory PCR'),
    sa.Column('protocol', sa.VARCHAR(length=60), nullable=True, comment='What is the name/identifier of the assay? E.g. CDC v1'),
    sa.Column('date_pcred', sa.DateTime(), nullable=True, comment='Date this PCR was done'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('pcr_identifier', sa.Integer(), nullable=True, comment='Differentiates this PCR from other PCRs done on this sample on the same day.'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['extraction_id'], ['extraction.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tiling_pcr',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('extraction_id', sa.Integer(), nullable=True),
    sa.Column('number_of_cycles', sa.Integer(), nullable=True, comment='Number of PCR cycles'),
    sa.Column('date_pcred', sa.DateTime(), nullable=True, comment='Date this PCR was done'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('pcr_identifier', sa.Integer(), nullable=True, comment='Differentiates this PCR from other PCRs done on this sample on the same day.'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['extraction_id'], ['extraction.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_sequencing',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('extraction_id', sa.Integer(), nullable=True),
    sa.Column('raw_sequencing_batch_id', sa.Integer(), nullable=True),
    sa.Column('tiling_pcr_id', sa.Integer(), nullable=True),
    sa.Column('data_storage_device', sa.VARCHAR(length=64), nullable=True, comment='which machine is this data stored on?'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['extraction_id'], ['extraction.id'], ),
    sa.ForeignKeyConstraint(['raw_sequencing_batch_id'], ['raw_sequencing_batch.id'], ),
    sa.ForeignKeyConstraint(['tiling_pcr_id'], ['tiling_pcr.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_sequencing_illumina',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('raw_sequencing_id', sa.Integer(), nullable=True),
    sa.Column('path_r1', sa.VARCHAR(length=250), nullable=True),
    sa.Column('path_r2', sa.VARCHAR(length=250), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['raw_sequencing_id'], ['raw_sequencing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('raw_sequencing_nanopore',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('raw_sequencing_id', sa.Integer(), nullable=True),
    sa.Column('path_fast5', sa.VARCHAR(length=250), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['raw_sequencing_id'], ['raw_sequencing.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('read_set',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('raw_sequencing_id', sa.Integer(), nullable=True),
    sa.Column('readset_batch_id', sa.Integer(), nullable=True),
    sa.Column('readset_identifier', sa.Integer(), nullable=True, comment='ReadSet identifier id, incrementing integer id to uniquely identify this read set'),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('readset_name', sa.VARCHAR(length=60), nullable=True, comment='the full name of this read set i.e. {readset_id}-{sample.sample_identifier}'),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.Column('data_storage_device', sa.VARCHAR(length=64), nullable=True, comment='which machine is this data stored on?'),
    sa.Column('include', sa.VARCHAR(length=128), nullable=True, comment='Should this readset be included in further analyses?'),
    sa.ForeignKeyConstraint(['raw_sequencing_id'], ['raw_sequencing.id'], onupdate='cascade', ondelete='set null'),
    sa.ForeignKeyConstraint(['readset_batch_id'], ['read_set_batch.id'], onupdate='cascade', ondelete='set null'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('artic_covid_result',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sample_name', sa.VARCHAR(length=60), nullable=True, comment='The sample name from the artic result output.'),
    sa.Column('pct_N_bases', sa.Numeric(), nullable=True, comment='Percentage N bases'),
    sa.Column('pct_covered_bases', sa.Numeric(), nullable=True, comment='Percentage covered bases'),
    sa.Column('num_aligned_reads', sa.Numeric(), nullable=True, comment='The number of aligned reads'),
    sa.Column('workflow', sa.VARCHAR(length=60), nullable=True, comment='Workflow e.g. illumina, medaka, nanopolish'),
    sa.Column('profile', sa.VARCHAR(length=60), nullable=True, comment='Profile e.g. docker, conda, etc'),
    sa.Column('readset_id', sa.Integer(), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['readset_id'], ['read_set.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('mykrobe',
    sa.Column('readset_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mykrobe_version', sa.VARCHAR(length=50), nullable=True),
    sa.Column('phylo_grp', sa.VARCHAR(length=60), nullable=True),
    sa.Column('phylo_grp_covg', sa.CHAR(), nullable=True),
    sa.Column('phylo_grp_depth', sa.CHAR(), nullable=True),
    sa.Column('species', sa.VARCHAR(length=50), nullable=True),
    sa.Column('species_covg', sa.CHAR(), nullable=True),
    sa.Column('species_depth', sa.CHAR(), nullable=True),
    sa.Column('lineage', sa.VARCHAR(length=50), nullable=True),
    sa.Column('lineage_covg', sa.CHAR(), nullable=True),
    sa.Column('lineage_depth', sa.CHAR(), nullable=True),
    sa.Column('susceptibility', sa.VARCHAR(length=50), nullable=True),
    sa.Column('variants', sa.VARCHAR(length=80), nullable=True),
    sa.Column('genes', sa.VARCHAR(length=100), nullable=True),
    sa.Column('drug', sa.VARCHAR(length=90), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['readset_id'], ['read_set.id'], onupdate='cascade', ondelete='set null'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('read_set_illumina',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('readset_id', sa.Integer(), nullable=True),
    sa.Column('path_r1', sa.VARCHAR(length=250), nullable=True),
    sa.Column('path_r2', sa.VARCHAR(length=250), nullable=True),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['readset_id'], ['read_set.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('read_set_nanopore',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('readset_id', sa.Integer(), nullable=True),
    sa.Column('path_fastq', sa.VARCHAR(length=250), nullable=True),
    sa.Column('date_added', sa.DateTime(), nullable=True),
    sa.Column('basecaller', sa.VARCHAR(length=60), nullable=True),
    sa.Column('barcode', sa.VARCHAR(length=60), nullable=True),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.ForeignKeyConstraint(['readset_id'], ['read_set.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pangolin_result',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lineage', sa.VARCHAR(length=60), nullable=True, comment='The pangolin lineage'),
    sa.Column('conflict', sa.Numeric(), nullable=True, comment='How many other lineages could this sample feasibly be?'),
    sa.Column('ambiguity_score', sa.Numeric(), nullable=True, comment='the proportion of relevant sites in a sequnece which were imputed to the reference values. A score of 1 indicates that no sites were imputed, while a score of 0 indicates that more sites were imputed than were not imputed. This score only includes sites which are used by the decision tree to classify a sequence'),
    sa.Column('scorpio_call', sa.VARCHAR(length=60), nullable=True, comment='Output of scorpio tool.'),
    sa.Column('scorpio_support', sa.Numeric(), nullable=True, comment='The proportion of defining variants which have the alternative allele in the sequence'),
    sa.Column('scorpio_conflict', sa.Numeric(), nullable=True, comment='the proportion of defining variants which have the reference allele in the sequence. Ambiguous/other non-ref/alt bases at each of the variant positions contribute only to the denominators of these scores'),
    sa.Column('version', sa.VARCHAR(length=60), nullable=True, comment='See https://cov-lineages.org/pangolin_docs/output.html'),
    sa.Column('pangolin_version', sa.VARCHAR(length=60), nullable=True, comment='Pangolin version'),
    sa.Column('pangolearn_version', sa.VARCHAR(length=60), nullable=True, comment='Pangolearn version'),
    sa.Column('pango_version', sa.VARCHAR(length=60), nullable=True, comment='The sample name from the artic result output.'),
    sa.Column('status', sa.VARCHAR(length=60), nullable=True, comment='Pass/fail QC'),
    sa.Column('note', sa.VARCHAR(length=300), nullable=True, comment='If any conflicts from the decision tree, this field will output the alternative assignments. '),
    sa.Column('notes', sa.VARCHAR(length=256), nullable=True, comment='General comments.'),
    sa.Column('artic_covid_result_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['artic_covid_result_id'], ['artic_covid_result.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('pangolin_result')
    op.drop_table('read_set_nanopore')
    op.drop_table('read_set_illumina')
    op.drop_table('mykrobe')
    op.drop_table('artic_covid_result')
    op.drop_table('read_set')
    op.drop_table('raw_sequencing_nanopore')
    op.drop_table('raw_sequencing_illumina')
    op.drop_table('raw_sequencing')
    op.drop_table('tiling_pcr')
    op.drop_table('covid_confirmatory_pcr')
    op.drop_table('sample_source_project')
    op.drop_table('pcr_result')
    op.drop_table('extraction')
    op.drop_table('sample')
    op.drop_table('read_set_batch')
    op.drop_table('project')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('sample_source')
    op.drop_table('raw_sequencing_batch')
    op.drop_table('pcr_assay')
    op.drop_table('groups')
    # ### end Alembic commands ###
